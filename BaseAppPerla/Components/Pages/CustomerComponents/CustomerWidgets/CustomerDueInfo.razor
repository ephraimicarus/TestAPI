@using BaseAppPerla.Interfaces
@using BaseAppPerla.Models
@inject ICustomerDueService _customerDueService;
@inject ICustomerService _customerService;


<MudCard>
    <MudCardContent>
        @if (isLoading)
        {
            <div>Dohvaćam podatke...</div>
        }
        else
        {
            <MudCard>
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@customer.Name</MudText>
                    </MudCardHeader>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@customer.Phone</MudText>
                    </MudCardHeader>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@customer.Email</MudText>
                    </MudCardHeader>
                </MudCard>
                
                @foreach (var transactionId in customerDueDeliveries)
                {
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">Broj transakcije: @transactionId.First().TransactionInfo!.TransactionId</MudText>
                    </MudCardHeader>
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Rok vraćanja: @transactionId.First().TransactionInfo!.DateDue.ToString("dd-MM-yyyy")</MudText>
                    </MudCardHeader>                    
                    <MudTable Items="@transactionId" Hover="true" Striped="true" Outlined="true">
                        <HeaderContent>
                            <MudTh>Artikl</MudTh>
                            <MudTh>Količina</MudTh>
                            <MudTh>Datum isporuke</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Inventory!.Item!.Description</MudTd>
                            <MudTd>@context.QuantityToReturn</MudTd>
                            <MudTd>@context.TransactionInfo!.TransactionDate.ToString("dd-MM-yyyy")</MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudCard>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Delete</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public Customer customer { get; set; }
    private List<List<StockDelivery>> customerDueDeliveries = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var stockDeliveries = await _customerDueService.GetCustomerDueItems(customer.Oib!);
        if (stockDeliveries != null)
        {
            isLoading = false;
        }
        customerDueDeliveries = GroupByTransactionId(stockDeliveries!);
    }

    private List<List<StockDelivery>> GroupByTransactionId(List<StockDelivery> stockDeliveries)
    {
        var transactionIds = stockDeliveries.Select(x => x.TransactionInfo!.TransactionId).Distinct();
        var groupedStockDeliveries = new List<List<StockDelivery>>();
        foreach (var transactionId in transactionIds)
        {
            var groupedStockDelivery = stockDeliveries.Where(x => x.TransactionInfo!.TransactionId == transactionId).ToList();
            groupedStockDeliveries.Add(groupedStockDelivery);
        }
        return groupedStockDeliveries;
    }
}
