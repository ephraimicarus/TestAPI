@using BaseAppPerla.DTOs
@using BaseAppPerla.Interfaces
@using BaseAppPerla.Models
@inject IInventoryService _inventoryService;
@inject ICustomerService _customerService;
@inject NavigationManager Navigation;

@if (!showEditCustomer)
{
    <MudCard>
        <MudCardContent>
            @if (isLoading)
            {
                <div>Dohvaćam podatke...</div>
                <MudProgressCircular Indeterminate="true" />
            }
            else
            {
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Customer.Name </MudText>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="margin-right: 8px; margin-left: 8px"
                                       OnClick="ShowEditCustomer">Edit</MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Secondary"
                                       OnClick="()=>DeleteCustomer(Customer.CustomerId)">Delete</MudButton>
                        </MudCardActions>
                    </MudCardHeader>
                    <MudTable Items="@customerInventories" Hover="true" Striped="true" Outlined="true">
                        <HeaderContent>
                            <MudTh>Artikl</MudTh>
                            <MudTh>Količina</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Item!.Description</MudTd>
                            <MudTd>@context.Quantity</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCard>
            }
        </MudCardContent>
        @if (isLoadingDelete)
        {
            <div>Brišem...</div>
            <MudProgressCircular Indeterminate="true" />
        }
    </MudCard>
}
@if (showEditCustomer)
{
    <div style="margin-top: 1rem;">
        <EditCustomer CustomerId="Customer.CustomerId"></EditCustomer>
    </div>
}
@code {
    [Parameter]
    public Customer Customer { get; set; }
    private List<InventoryDto> customerInventories = new();
    private bool isLoading = true;
    private bool isLoadingDelete = false;
    private bool showEditCustomer = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var inventories = await _inventoryService.GetInventoriesAsync(Customer.CustomerId);
        if (inventories != null)
        {
            isLoading = false;
        }
        customerInventories = inventories!;
    }
    private void ShowEditCustomer()
    {
        showEditCustomer = true;
    }
    private void ResetEditCustomer()
    {
        showEditCustomer = false;
    }
    private async Task DeleteCustomer(int customerId)
    {
        isLoadingDelete = true;
        var result = await _customerService.DeleteCustomerAsync(customerId);
        if (result.IsSuccess)
        {
            await Application.Current!.MainPage!.DisplayAlert("Uspješno brisanje", $"Izbrisali ste klijenta {Customer.Name}, OIB: {Customer.Oib} i njegovu povijest transakcija.", "OK");
            await InvokeAsync(() => Navigation.NavigateTo("/customers", true));
        }
        else
        {
            errorMessage = result.ErrorMessage;
            await Application.Current!.MainPage!.DisplayAlert("Error", result.ErrorMessage, "OK");
        }
        isLoadingDelete = false;
    }
}