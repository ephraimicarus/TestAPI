@using BaseAppPerla.Interfaces
@using BaseAppPerla.Models
@inject IItemService _itemService
@inject IInventoryService _inventoryService
@inject NavigationManager Navigation

<MudCard>
    <MudCardContent>
        <MudForm>
            <MudTextField @bind-Value="item.Description" Label="Naziv artikla" Required="true" />
            <MudTextField @bind-Value="BaseInventory!.QuantityStored" Label="Stanje" Required="true" />
            <MudTextField @bind-Value="BaseInventory!.QuantityRented" Label="Izdano" Required="true" />
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateItem">
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Secondary" />
                <MudText> U TIJEKU.. </MudText>
            }
            else
            {
                <MudText> AŽURIRAJ </MudText>
            }
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public BaseInventory? BaseInventory { get; set; }
    private Item item = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        item = await _itemService.GetItemByIdAsync(BaseInventory!.Item!.ItemId);
    }

    private async Task UpdateItem()
    {
        isLoading = true;
        var result = await _itemService.UpdateItemAsync(item);
        await _inventoryService.UpdateBaseInventoryAsync(BaseInventory!);
        if(result.IsSuccess)
        {
            item = result.Data!;
            await Application.Current!.MainPage!.DisplayAlert("Uspješno ažuriran artikl", $"Opis: {item.Description}", "OK");
            isLoading = false;
            Navigation.NavigateTo("/inventory", true);
        }
        else
        {
            await Application.Current!.MainPage!.DisplayAlert("Greška", "Došlo je do greške prilikom ažuriranja artikla", "OK");
            isLoading = false;
        }
    }
}
