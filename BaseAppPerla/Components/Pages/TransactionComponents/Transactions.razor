@page "/transactions"
@using BaseAppPerla.Components.Pages.TransactionComponents.Deliveries
@using BaseAppPerla.Components.Pages.TransactionComponents.Returns
@using BaseAppPerla.Interfaces
@using BaseAppPerla.Models
@inject ITransactionService _transactionService
@inject NavigationManager Navigation

<h3>Transakcije</h3>
<br />
<MudCard>
    @if (!showDeliveryInfo)
    {
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudButton Style="margin: 10px"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="NavigateToCreateDelivery">Kreiraj isporuku</MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton Style="margin: 10px"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="NavigateToCreateReturn">Kreiraj povrat</MudButton>
            </MudItem>
        </MudGrid>
    }

</MudCard>
<br />

<MudTabs>
    <MudTabPanel Text="Isporuka">
        <MudCard>
            @if (showDeliveryTable)
            {
                <br />
                <MudTextField @bind-Value="SearchString" Placeholder="Pretraži po imenu/nazivu firme ili OIB" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                <MudCheckBox @bind-Value="ShowActiveOnly" Label="Prikaži samo aktivne isporuke" />
                <br />
                @if (isLoading)
                {
                    <div>Dohvaćam podatke...</div>
                    <MudProgressCircular Indeterminate="true" />
                }
                else
                {
                    @if (filteredDeliveryList.Count() == 0)
                    {
                        <div>Nema rezultata pretrage</div>
                    }
                    else
                    {
                        <MudTable Items="@pagedDeliveryList"
                                  Hover="true"
                                  Striped="true"
                                  Outlined="true"
                                  RowsPerPage="deliveryRowsPerPage">
                            <HeaderContent>
                                <MudTh>Broj transakcije</MudTh>
                                <MudTh>Broj isporuke</MudTh>
                                <MudTh>Klijent</MudTh>
                                <MudTh>Datum isporuke</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Transakcija">@context.First().TransactionInfo?.TransactionId</MudTd>
                                <MudTd DataLabel="Isporuka">@context.First().StockDeliveryId</MudTd>
                                <MudTd DataLabel="Klijent">@context.First().Inventory?.Customer?.Name</MudTd>
                                <MudTd DataLabel="Datum isporuke">@context.First().TransactionInfo?.TransactionDate.ToString("dd-MM-yyyy")</MudTd>
                                <MudTd DataLabel="">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ShowDeliveryDetails(context.First())">Detalji</MudButton>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudPagination Count="totalDeliveryPages" SelectedChanged="HandleDeliveryPageChange" />
                            </PagerContent>
                        </MudTable>
                    }
                }
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ResetDeliveryInfo()" Style="width: 160px; margin: 20px;">Prikaži isporuke</MudButton>
            }
            @if (showDeliveryInfo)
            {
                <DeliveryInfo transactionId="selectedDelivery!.TransactionInfo!.TransactionId" />
            }
            <br />
        </MudCard>
    </MudTabPanel>

    <MudTabPanel Text="Povrat">
        <MudCard>
            @if (showReturnTable)
            {
                <br />
                <MudTextField @bind-Value="SearchString" Placeholder="Pretraži po imenu/nazivu firme ili OIB" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                <br />
                @if (isLoading)
                {
                    <div>Dohvaćam podatke...</div>
                    <MudProgressCircular Indeterminate="true" />
                }
                else
                {
                    @if (filteredReturnList.Count() == 0)
                    {
                        <div>Nema rezultata pretrage</div>
                    }
                    else
                    {
                        <MudTable Items="@pagedReturnList" Hover="true" Striped="true" Outlined="true">
                            <HeaderContent>
                                <MudTh>Povrat na transakciju broj</MudTh>
                                <MudTh>Povrat na isporuku broj</MudTh>
                                <MudTh>Klijent</MudTh>
                                <MudTh>Datum povrata</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Povrat na transakciju broj">@context.First().Delivery?.TransactionInfo?.TransactionId </MudTd>
                                <MudTd DataLabel="Povrat na isporuke">@context.First().Delivery?.StockDeliveryId - @context.Last().Delivery?.StockDeliveryId</MudTd>
                                <MudTd DataLabel="Klijent">@context.First().Delivery?.Inventory?.Customer?.Name</MudTd>
                                <MudTd DataLabel="Datum povrata">@context.First().Delivery?.TransactionInfo?.TransactionDate</MudTd>
                                <MudTd DataLabel="">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>ShowReturnDetails(context)">Detalji</MudButton>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudPagination Count="totalReturnPages" SelectedChanged="HandleReturnPageChange" />
                            </PagerContent>
                        </MudTable>
                    }
                }
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ResetReturnInfo()" Style="width: 160px; margin: 20px;">Prikaži povrat</MudButton>
            }
            @if (showReturnInfo)
            {
                <ReturnInfo transactionId="selectedReturn" />
            }
            <br />
        </MudCard>
    </MudTabPanel>
</MudTabs>


@code {
    private List<TransactionModel> transactionsList = new();
    private List<List<StockDelivery>> deliveryList = new();
    private List<List<StockReturn>> returnList = new();
    private List<List<StockDelivery>> pagedDeliveryList = new();
    private List<List<StockReturn>> pagedReturnList = new();
    private StockDelivery? selectedDelivery;
    private List<StockReturn>? selectedReturn;
    private string _searchString = string.Empty;
    private bool isLoading = true;
    private bool _showActiveOnly { get; set; } = true;
    private bool showDeliveryInfo = false, showDeliveryTable = true;
    private bool showReturnInfo = false, showReturnTable = true;

    // Pagination states for each tab
    private int totalDeliveryPages, deliveryRowsPerPage = 8, currentDeliveryPage = 1;
    private int totalReturnPages, returnRowsPerPage = 8, currentReturnPage = 1;
    private int totalTransactionPages, transactionRowsPerPage = 3, currentTransactionPage = 1;

    protected override async Task OnInitializedAsync()
    {
        transactionsList = await _transactionService.GetAllTransactions();
        var deliveries = await _transactionService.GetAllDeliveries();
        var returns = await _transactionService.GetAllReturns();
        if (transactionsList != null || deliveryList != null || returnList != null)
        {
            isLoading = false;
        }
        deliveryList = GroupDeliveryByTransactionId(deliveries);
        returnList = GroupReturnByTransactionId(returns);
        CalculateTotalPages();
        UpdatePagedDeliveryList();
        UpdatePagedReturnList();
    }

    private List<List<StockDelivery>> GroupDeliveryByTransactionId(List<StockDelivery> stockDeliveries)
    {
        var transactionIds = stockDeliveries.Select(x => x.TransactionInfo!.TransactionId).Distinct();
        var groupedStockDeliveries = new List<List<StockDelivery>>();
        foreach (var transactionId in transactionIds)
        {
            var groupedStockDelivery = stockDeliveries.Where(x => x.TransactionInfo!.TransactionId == transactionId).ToList();
            groupedStockDeliveries.Add(groupedStockDelivery);
        }
        return groupedStockDeliveries;
    }

    private List<List<StockReturn>> GroupReturnByTransactionId(List<StockReturn> stockDeliveries)
    {
        var transactionIds = stockDeliveries.Select(x => x.Delivery!.TransactionInfo!.TransactionId).Distinct();
        var groupedStockDeliveries = new List<List<StockReturn>>();
        foreach (var transactionId in transactionIds)
        {
            var groupedStockDelivery = stockDeliveries.Where(x => x.Delivery!.TransactionInfo!.TransactionId == transactionId).ToList();
            groupedStockDeliveries.Add(groupedStockDelivery);
        }
        return groupedStockDeliveries;
    }

    private void CalculateTotalPages()
    {
        var activeFilteredDeliveryList = filteredDeliveryList;
        if (_showActiveOnly)
        {
            activeFilteredDeliveryList = filteredDeliveryList
           .Where(d => d.First().TransactionInfo?.IsActive == true);

        }

        totalDeliveryPages = (int)Math.Ceiling(activeFilteredDeliveryList.Count() / (double)deliveryRowsPerPage);
        totalReturnPages = (int)Math.Ceiling(filteredReturnList.Count() / (double)returnRowsPerPage);
        totalTransactionPages = (int)Math.Ceiling(transactionsList.Count() / (double)transactionRowsPerPage);
    }

    private void UpdatePagedDeliveryList()
    {
        var activeFilteredDeliveryList = filteredDeliveryList;
        if (_showActiveOnly)
        {
            activeFilteredDeliveryList = filteredDeliveryList
           .Where(d => d.First().TransactionInfo?.IsActive == true);

        }
        pagedDeliveryList = activeFilteredDeliveryList
            .Skip((currentDeliveryPage - 1) * deliveryRowsPerPage)
            .Take(deliveryRowsPerPage)
            .ToList();
    }

    private void UpdatePagedReturnList()
    {
        pagedReturnList = filteredReturnList
            .Skip((currentReturnPage - 1) * returnRowsPerPage)
            .Take(returnRowsPerPage)
            .ToList();
    }

    private void HandleDeliveryPageChange(int page)
    {
        currentDeliveryPage = page;
        UpdatePagedDeliveryList();
    }

    private void HandleReturnPageChange(int page)
    {
        currentReturnPage = page;
        UpdatePagedReturnList();
    }

    private void HandleTransactionPageChange(int page)
    {
        currentTransactionPage = page;
    }

    private void ShowDeliveryDetails(StockDelivery delivery)
    {
        selectedDelivery = delivery;
        showDeliveryTable = false;
        showDeliveryInfo = true;
    }

    private void ResetDeliveryInfo()
    {
        showDeliveryInfo = false;
        showDeliveryTable = true;
    }

    private void ShowReturnDetails(List<StockReturn> stockReturn)
    {
        selectedReturn = stockReturn;
        showReturnTable = false;
        showReturnInfo = true;
    }

    private void ResetReturnInfo()
    {
        showReturnInfo = false;
        showReturnTable = true;
    }

    private void NavigateToCreateDelivery()
    {
        Navigation.NavigateTo("/createdelivery");
    }

    private void NavigateToCreateReturn()
    {
        Navigation.NavigateTo("/createreturn");
    }

    private IEnumerable<List<StockDelivery>> filteredDeliveryList => deliveryList
        .Where(d => (string.IsNullOrWhiteSpace(SearchString)
        || d.First().Inventory?.Customer?.Name?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
        || d.First().Inventory?.Customer?.Oib?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true));

    private IEnumerable<List<StockReturn>> filteredReturnList => returnList
        .Where(r => string.IsNullOrWhiteSpace(SearchString)
        || r.First().Delivery?.Inventory?.Customer?.Name?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
        || r.First().Delivery?.Inventory?.Customer?.Oib?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true);

    private string SearchString
    {
        get => _searchString;
        set
        {
            if (_searchString != value)
            {
                _searchString = value;
                CalculateTotalPages();
                UpdatePagedDeliveryList();
                UpdatePagedReturnList();
            }
        }
    }

    private bool ShowActiveOnly
    {
        get => _showActiveOnly;
        set
        {
            if (_showActiveOnly != value)
            {
                _showActiveOnly = value;
                CalculateTotalPages();
                UpdatePagedDeliveryList();
                UpdatePagedReturnList();
            }
        }
    }
}
